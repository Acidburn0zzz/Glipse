using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Web; 
using Glimpse.AspNet.PipelineInspector;
using Glimpse.Core;
using Glimpse.Core.Extensibility;
using Glimpse.Core.Framework; 
using Glimpse.Test.Common;
using Moq;
using Xunit;
using Xunit.Extensions;

namespace Glimpse.Test.AspNet.PipelineInspector
{
    public class RoutesInspectorShould
    {
        public RoutesInspectorShould()
        {
            var routeHandler = new Mock<System.Web.Routing.IRouteHandler>().Object;

            System.Web.Routing.RouteTable.Routes.Clear();
            System.Web.Routing.RouteTable.Routes.Add("Test", new System.Web.Routing.Route("Test", routeHandler)); 
            System.Web.Routing.RouteTable.Routes.Add("BaseTyped", new NewRouteBase());
            System.Web.Routing.RouteTable.Routes.Add("BaseTestTyped", new NewConstructorRouteBase("Name"));
            System.Web.Routing.RouteTable.Routes.Add("SubTyped", new NewRoute("test", routeHandler));
            System.Web.Routing.RouteTable.Routes.Add("SubTestTyped", new NewConstructorRoute("test", routeHandler, "Name"));
            System.Web.Routing.RouteTable.Routes.Ignore("{resource}.axd/{*pathInfo}", new { resource = "Test", pathInfo = "[0-9]" });
        }

        [Fact]
        public void Construct()
        {
            var sut = new RoutesInspector();

            Assert.NotNull(sut);
            Assert.IsAssignableFrom<IPipelineInspector>(sut);
        }

        [Theory, AutoMock]
        public void Setup(RoutesInspector sut, IPipelineInspectorContext context, System.Web.Routing.Route route1, System.Web.Routing.Route route2, System.Web.Routing.RouteBase route3)
<<<<<<< Updated upstream
        { 
            context.ProxyFactory.Setup(pf => pf.IsWrapClassEligible(It.IsAny<Type>())).Returns(true);
            context.ProxyFactory.Setup(pf => pf.WrapClass((System.Web.Routing.Route)System.Web.Routing.RouteTable.Routes[0], It.IsAny<IEnumerable<IAlternateMethod>>(), null, It.IsAny<object[]>())).Returns(route1);
            context.ProxyFactory.Setup(pf => pf.WrapClass((System.Web.Routing.Route)System.Web.Routing.RouteTable.Routes[1], It.IsAny<IEnumerable<IAlternateMethod>>(), null, It.IsAny<object[]>())).Returns(route2);
            context.ProxyFactory.Setup(pf => pf.WrapClass(System.Web.Routing.RouteTable.Routes[2], It.IsAny<IEnumerable<IAlternateMethod>>(), null, null)).Returns(route3);

            sut.Setup(context);

            context.ProxyFactory.Verify(pf => pf.WrapClass(It.IsAny<System.Web.Routing.Route>(), It.IsAny<IEnumerable<IAlternateMethod>>(), It.IsAny<IEnumerable<object>>(), It.IsAny<IEnumerable<object>>()), Times.AtLeastOnce());
            context.ProxyFactory.Verify(pf => pf.WrapClass(It.IsAny<System.Web.Routing.RouteBase>(), It.IsAny<IEnumerable<IAlternateMethod>>(), It.IsAny<IEnumerable<object>>(), null), Times.AtLeastOnce());
=======
        {
            context.Setup(x => x.ProxyFactory).Returns(new CastleDynamicProxyFactory(context.Logger, context.MessageBroker, () => new ExecutionTimer(new Stopwatch()), () => new RuntimePolicy()));

            ////context.ProxyFactory.Setup(pf => pf.IsWrapClassEligible(It.IsAny<Type>())).Returns(true);
            ////context.ProxyFactory.Setup(pf => pf.WrapClass((System.Web.Routing.Route)System.Web.Routing.RouteTable.Routes[0], It.IsAny<IEnumerable<IAlternateImplementation<System.Web.Routing.Route>>>(), null, It.IsAny<object[]>())).Returns(route1);
            ////context.ProxyFactory.Setup(pf => pf.WrapClass((System.Web.Routing.Route)System.Web.Routing.RouteTable.Routes[1], It.IsAny<IEnumerable<IAlternateImplementation<System.Web.Routing.Route>>>(), null, It.IsAny<object[]>())).Returns(route2);
            ////context.ProxyFactory.Setup(pf => pf.WrapClass(System.Web.Routing.RouteTable.Routes[2], It.IsAny<IEnumerable<IAlternateImplementation<System.Web.Routing.RouteBase>>>(), null, null)).Returns(route3);

            sut.Setup(context);

            ////context.ProxyFactory.Verify(pf => pf.WrapClass(It.IsAny<System.Web.Routing.Route>(), It.IsAny<IEnumerable<IAlternateImplementation<System.Web.Routing.Route>>>(), It.IsAny<IEnumerable<object>>(), It.IsAny<IEnumerable<object>>()), Times.AtLeastOnce());
            ////context.ProxyFactory.Verify(pf => pf.WrapClass(It.IsAny<System.Web.Routing.RouteBase>(), It.IsAny<IEnumerable<IAlternateImplementation<System.Web.Routing.RouteBase>>>(), It.IsAny<IEnumerable<object>>(), null), Times.AtLeastOnce());
>>>>>>> Stashed changes
        }

        [Theory, AutoMock]
        public void SetupRealProxy(RoutesInspector sut, IPipelineInspectorContext context, System.Web.Routing.Route route1, System.Web.Routing.Route route2)
        {
            var routeUrl1 = GetRouteUrl(0);
            var routeUrl2 = GetRouteUrl(1);

            var proxyFactory = new CastleDynamicProxyFactory(context.Logger, context.MessageBroker, () => null, () => RuntimePolicy.On);
            context.Setup(x => x.ProxyFactory).Returns(proxyFactory);

            sut.Setup(context);
            
            Assert.Equal(routeUrl1, GetRouteUrl(0));
            Assert.Equal(routeUrl2, GetRouteUrl(1));
        }

        private string GetRouteUrl(int index)
        {
            return ((System.Web.Routing.Route)System.Web.Routing.RouteTable.Routes[index]).Url;
        }

        private class NewRouteBase : System.Web.Routing.RouteBase
        {
            public override System.Web.Routing.RouteData GetRouteData(HttpContextBase httpContext)
            { 
                return new System.Web.Routing.RouteData();
            }

            public override System.Web.Routing.VirtualPathData GetVirtualPath(System.Web.Routing.RequestContext requestContext, System.Web.Routing.RouteValueDictionary values)
            {
                return new System.Web.Routing.VirtualPathData(this, "Test");
            }
        }

        private class NewConstructorRouteBase : NewRouteBase
        {
            public NewConstructorRouteBase(string name)
            {
            }
        }

        private class NewRoute : System.Web.Routing.Route
        {
            public NewRoute(string url, System.Web.Routing.IRouteHandler routeHandler)
                : base(url, routeHandler)
            {
            }

            public NewRoute(string url, System.Web.Routing.RouteValueDictionary defaults, System.Web.Routing.IRouteHandler routeHandler)
                : base(url, defaults, routeHandler)
            {
            }

            public NewRoute(string url, System.Web.Routing.RouteValueDictionary defaults, System.Web.Routing.RouteValueDictionary constraints, System.Web.Routing.IRouteHandler routeHandler)
                : base(url, defaults, constraints, routeHandler)
            {
            }

            public NewRoute(string url, System.Web.Routing.RouteValueDictionary defaults, System.Web.Routing.RouteValueDictionary constraints, System.Web.Routing.RouteValueDictionary dataTokens, System.Web.Routing.IRouteHandler routeHandler)
                : base(url, defaults, constraints, dataTokens, routeHandler)
            {
            }
        }

        private class NewConstructorRoute : System.Web.Routing.Route
        {
            public NewConstructorRoute(string url, System.Web.Routing.IRouteHandler routeHandler, string name)
                : base(url, routeHandler)
            {
            }
        }
    }
}
