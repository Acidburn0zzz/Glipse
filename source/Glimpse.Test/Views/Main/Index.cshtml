@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <title>Index</title>
</head>
<body>
    <div>
        This is a standard view which tells me that it is now @DateTime.Now.ToLongTimeString(). This data means nothing really, look at the X-Glimpse-Debuger HTTP header in FireBug/Fiddler.

        <p>Config Info:</p>
        <ul>
            <li>On = @ViewBag.GlimpseOn</li>
            <li>
                Allowed IP's =
                <ol>
                @foreach (Glimpse.Net.Configuration.IpAddress ip in ViewBag.IpAddresses) { 
                    <li>@ip.Address</li>
                }
                </ol>
            </li>
            <li>
                Allowed ContentType's = 
                <ol>
                @foreach (Glimpse.Net.Configuration.ContentType ct in ViewBag.ContentTypes)
                {
                    <li>@ct.Content</li>
                }
                </ol>
            </li>
            <li>GlimpseMode = @ViewBag.GlimpseMode</li>
        </ul>
    </div>

    <h1>Test Cases</h1>
    <table>
        <tr>
            <td colspan="2">
                <h2>Scenario 1:</h2>
            </td>
        </tr>
        <tr>
            <td class="glimpse-scenario-data">
<pre>
    var scenarioOneData = {
        'viewData' : 'Controller set viewdata',
        'ViewBagData' : 'Controller set viewbag',
        'GlimpseOn' : 'True',
        'IpAddresses' : 'Glimpse.Net.Configuration.IpCollection',
        'ContentTypes' : 'Glimpse.Net.Configuration.ContentTypeCollection',
        'GlimpseMode' : 'body'
    };       
</pre> 
            </td>
            <td class="glimpse-scenario glimpse-scenario-one glimpse-panel"></td>
        </tr>
        <tr>
            <td colspan="2">
                <h2>Scenario 2:</h2>
            </td>
        </tr>
        <tr>
            <td class="glimpse-scenario-data">
<pre>  
    var scenarioTwoData = [
            [ 'Attribute', 'Value', 'Description' ],
            [ 'class', 'classname', 'Specifies a classname for an element' ],
            [ 'dir', 'rtl', 'Specifies the text direction for the content' ], 
            [ 'id', 'id', 'Specifies a unique id for an element' ],
            [ 'lang', 'language_code', 'Specifies the content in an element' ],
            [ 'style', 'style_definition', 'Specifies an inline style for an element' ],
            [ 'title', 'text', 'Specifies extra information about an element' ],
            [ 'xml:lang', 'language_code', 'Specifies a language, in XHTML documents' ]
        ];       
</pre> 
            </td>
            <td class="glimpse-scenario glimpse-scenario-two glimpse-panel"></td>
        </tr>
        <tr>
            <td colspan="2">
                <h2>Scenario 3:</h2>
            </td>
        </tr>
        <tr>
            <td class="glimpse-scenario-data">
<pre>
    var scenarioThreeData = {
            'viewData' : 'Controller set viewdata',
            'ViewBagData' : 'Controller set viewbag',
            'GlimpseOn' : [
                    [ 'Attribute', 'Value', 'Description' ],
                    [ 'class', 'classname', 'Specifies a classname for an element' ],
                    [ 'dir', 'rtl', 'Specifies the for the content in an element' ]
                ],
            'IpAddresses' : 'Glimpse.Net.Configuration.IpCollection' 
        }; 
</pre> 
            </td>
            <td class="glimpse-scenario glimpse-scenario-three glimpse-panel"></td>
        </tr>
    </table>
     
<style>
    .glimpse-open { position:fixed; right:0; bottom:0; height:27px; width:28px; border-left: 1px solid #ACA899; border-top: 1px solid #ACA899; background:#EEE; background:-moz-linear-gradient(top, #FFFFFF 0%, #EEEEEE 4%, #F3F5F7 8%, #E9E8DD 100%); background:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#FFFFFF), color-stop(4%,#EEEEEE), color-stop(8%,#F3F5F7), color-stop(100%,#E9E8DD)); filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#FFFFFF', endColorstr='#E9E8DD',GradientType=0 ); }
    .glimpse-icon { background: url(/Scripts/sprite.png) 0 -135px; height:20px; width:20px; margin: 3px 4px 0; }
    .glimpse-holder { display:none; height:0; position:fixed; bottom:0; left:0; width:100%; background-color:#fff; font-family:Lucida Grande,Tahoma,sans-serif; font-size:11px; }
    .glimpse-bar { height:27px; border-top:1px solid #ACA899; background:#FFFFFF; background:-moz-linear-gradient(top, #FFFFFF 0%, #EEEEEE 4%, #F3F5F7 8%, #E9E8DD 100%); background:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#FFFFFF), color-stop(4%,#EEEEEE), color-stop(8%,#F3F5F7), color-stop(100%,#E9E8DD)); filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#FFFFFF', endColorstr='#E9E8DD',GradientType=0 ); }
    .glimpse-buttons { float:right; height:17px; width:16px; padding:6px; }
    .glimpse-close { background:url(/Scripts/sprite.png) -1px -120px no-repeat; height:14px; width:14px; display:block; }
    .glimpse-close:hover { background:url(/Scripts/sprite.png) -17px -120px no-repeat; }
    .glimpse-tabs { height:24px; font-weight:bold; border-bottom:1px solid #ACA899; border-top:1px solid #CDCABB; background:#B9B7AF; background:-moz-linear-gradient(top, #B9B7AF 0%, #DAD8C8 4%, #D7D4C5 10%, #E9E6D5 100%); background:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#B9B7AF), color-stop(4%,#DAD8C8), color-stop(10%,#D7D4C5), color-stop(100%,#E9E6D5)); filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#B9B7AF', endColorstr='#E9E6D5',GradientType=0 );  }
    .glimpse-tabs ul { margin:4px 0px 0 0; padding:0px; }
    .glimpse-tabs li { display:inline; margin:0 2px 3px 2px; height:22px; padding:4px 9px 3px; color:#565656; }
    .glimpse-tabs li.active { padding:4px 8px 3px; color:#000; border-left:1px solid #A4A4A4; border-bottom:1px solid #A4A4A4; border-right:1px solid #A4A4A4; background:#F2F1EC; background:-moz-linear-gradient(top, #F2F1EC 0%, #F2F1EC 3%, #EFEEE9 7%, #E8E7E1 51%, #F7F6F1 92%, #F1F0EB 100%); background:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#F2F1EC), color-stop(3%,#F2F1EC), color-stop(7%,#EFEEE9), color-stop(51%,#E8E7E1), color-stop(92%,#F7F6F1), color-stop(100%,#F1F0EB)); filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#F2F1EC', endColorstr='#F1F0EB',GradientType=0 ); }
    .glimpse-tabs li.hover { padding:4px 8px 3px; border-left:1px solid #BFBDB1; border-bottom:1px solid #BFBDB1; border-right:1px solid #BFBDB1; background:#BFBDB1; background:-moz-linear-gradient(top, #BFBDB1 0%, #DAD9CB 4%, #D8D5C9 8%, #E8E7E1 51%, #F0EEE4 92%, #EDEBE1 100%); background:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#BFBDB1), color-stop(4%,#DAD9CB), color-stop(8%,#D8D5C9), color-stop(51%,#E8E7E1), color-stop(92%,#F0EEE4), color-stop(100%,#EDEBE1)); filter:progid:DXImageTransform.Microsoft.gradient( startColorstr='#BFBDB1', endColorstr='#EDEBE1',GradientType=0 ); }
    .glimpse-panel-holder {}
    .glimpse-panel { display:none; overflow:auto; }
    .glimpse-panel table { border-collapse:collapse; border-spacing:0; }
    .glimpse-panel table td, .glimpse-panel table th { padding:3px 4px; text-align:left; vertical-align:top; }
    .glimpse-panel-holder .active { display:block; }
    .glimpse-resizer { height:4px; cursor:n-resize; width:100%; position:absolute; top:-1px; }
    .glimpse-preview-string, .glimpse-preview-object { color:#006400; } 
    .glimpse-preview-string span, .glimpse-preview-object span { font-weight:bold; color:#444; padding-left:5px; } 
</style>
<style>
    .glimpse-scenario { font-family:Lucida Grande,Tahoma,sans-serif; font-size:11px; }
</style>

    <script src="/Scripts/jquery-1.4.4.js" type="text/javascript"></script> 

<script>
$(document).ready(function() {
    var scenarioOneData = {
            'viewData' : 'Controller set viewdata',
            'ViewBagData' : 'Controller set viewbag',
            'GlimpseOn' : 'True',
            'IpAddresses' : 'Glimpse.Net.Configuration.IpCollection',
            'ContentTypes' : 'Glimpse.Net.Configuration.ContentTypeCollection Glimpse.Net.Configuration.ContentTypeCollection Glimpse.Net.Configuration.ContentTypeCollection',
            'GlimpseMode' : 'body'
        };
    $('.glimpse-scenario-one').show().html($.glimpseProcessor.build(scenarioOneData));

    
    var scenarioTwoData = [
            [ 'Attribute', 'Value', 'Description' ],
            [ 'class', 'classname', 'Specifies a classname for an element' ],
            [ 'dir', 'rtl', 'Specifies the text direction for the content' ], 
            [ 'id', 'id', 'Specifies a unique id for an element' ],
            [ 'lang', 'language_code', 'Specifies the content in an element' ],
            [ 'style', 'style_definition', 'Specifies an inline style for an element' ],
            [ 'title', 'text', 'Specifies extra information about an element' ],
            [ 'xml:lang', 'language_code', 'Specifies a language, in XHTML documents' ]
        ]; 
    $('.glimpse-scenario-two').show().html($.glimpseProcessor.build(scenarioTwoData));
    
    var scenarioThreeData = {
            'viewData' : 'Controller set viewdata',
            'ViewBagData' : 'Controller set viewbag',
            'GlimpseOn' : [
                    [ 'Attribute', 'Value', 'Description' ],
                    [ 'class', 'classname', 'Specifies a classname for an element' ],
                    [ 'dir', 'rtl', 'Specifies the for the content in an element' ]
                ],
            'IpAddresses' : 'Glimpse.Net.Configuration.IpCollection' 
        };
    $('.glimpse-scenario-three').show().html($.glimpseProcessor.build(scenarioThreeData));

});
</script>

<script>
var glimpse;
if (window.jQuery) { (function ($) {
 
    $.glimpse = {}; 
    $.glimpseProcessor = {};
    $.glimpseResize = {};

	$.extend($.fn, {
        resizer : function() {
		    return this.each(function() { 
                var gr = $.glimpseResize;
		        gr.options.anchor = $(this).bind("mousedown", {el: $(this).parent()}, gr.startDrag); 
		    });
	    } 
    });

	$.extend({ 
        htmlEncode : function(value){ 
            return value ? $('<div/>').text(value).html() : ''; 
        },
        htmlDecode : function(value){ 
            return value ? $('<div/>').html(value).text() : ''; 
        }
    });
     
    $.extend($.glimpseResize, {
        options : {
            anchor : null, 
            staticOffset : null, 
            lastMousePos : 0,
            min : 50, 
            endDragCallback : function(height) {} },
        startDrag : function(e) { 
            var gr = $.glimpseResize, o = gr.options; 
		    o.anchor = $(e.data.el);
	        o.lastMousePos = gr.mousePosition(e).y; 
	        o.staticOffset = o.anchor.height() + o.lastMousePos;
	        o.anchor.css('opacity', 0.25);
	        $(document).mousemove(gr.performDrag).mouseup(gr.endDrag);
	        return false;
        },
	    performDrag : function(e) {
            var gr = $.glimpseResize, o = gr.options; 
	        var mousePos = gr.mousePosition(e).y;
	        var offsetMousePos = o.staticOffset - mousePos;
	        if (o.lastMousePos >= mousePos) {
		        offsetMousePos += 4;
	        }
	        offsetMousePos = Math.max(o.min, offsetMousePos);
	        o.anchor.height(offsetMousePos + 'px');
	        o.lastMousePos = mousePos;
	        if (offsetMousePos < o.min) {
		        gr.endDrag(e);
	        }
	        return false;
        },
        endDrag : function(e) {
            var gr = $.glimpseResize, o = gr.options; 
	        $(document).unbind('mousemove', gr.performDrag).unbind('mouseup', gr.endDrag);
	        o.anchor.css('opacity', 1); 
	        o.anchor = null;
	        o.staticOffset = null;
	        o.lastMousePos = 0;
            o.endDragCallback();
        },
        mousePosition : function(e) {
            var d = document.documentElement;
	        return { x: e.clientX + d.scrollLeft, y: e.clientY + d.scrollTop };
        }
    });
    
    $.extend($.glimpseProcessor, { 
        layout : function(g, options) {
            var _this = this, tabStrip = $('.glimpse-tabs ul'), panelHolder = $('.glimpse-panel-holder');
             
            //Build Dynamic HTML
            for (var key in options.data) {
                _this.addTab(tabStrip, key);
                _this.addTabBody(panelHolder, _this.build(options.data[key])); 
            }

            //Set Inital State
            $('li:first', tabStrip).addClass('active');
            $('.glimpse-panel:first', panelHolder).addClass('active');
        },
        addTab : function(container, name) {
            container.append('<li>' + name + '</li>');
        },
        addTabBody : function(container, content) {
            container.append('<div class="glimpse-panel">' + content + '</div>');
        },
        build : function(data) {
            var _this = this;
            if ($.isArray(data))
                return _this.buildCustomTable(data);
            if ($.isPlainObject(data))
                return _this.buildKeyValueTable(data);
            return _this.buildString(data);
        },
        buildKeyValueTable : function(data) {
            var _this = this, limit = 2;
//            if (data.length > (limit + 1))
//                return _this.buildKeyValuePreview(data, limit);

            var html = '<table><thead><tr><th>Key</th><th>Value</th></tr></thead>';
            for (var key in data)
                html += '<tr><th>' + $.htmlEncode(key) + '</th><td> '+ _this.build(data[key]) + '</td></tr>';
            html += '</table>';
            return html; 
        },
        buildCustomTable : function(data) {
            var _this = this, limit = 2;
//            if (data.length > (limit + 1))
//                return _this.buildCustomPreview(data, limit);

            var html = '<table><thead><tr>';
            for (var x = 0; x < data[0].length; x++)
                html += '<th>' + data[0][x] + '</th>';
            html += '</tr></thead>';
            for (var i = 1; i < data.length; i++) {
                html += '<tr' + (data[i].length > data[0].length ? ' class="' + data[i][data[i].length - 1] + '"' : '') + '>';
                for (var x = 0; x < data[0].length; x++)
                    html += '<td>' + _this.build(data[i][x]) + '</td>';
                html += '</tr>';
            }
            html += '</table>';
            return html; 
        },
        buildString : function(data) {
            var _this = this, characterMax = 50;
            if (data != null && data.length > characterMax)
                return _this.buildStringPreview(characterMax, data);
            return data;
        },
        buildKeyValuePreview : function(data, rowMax) {
            var _this = this, i = 0, html = '<span class="glimpse-preview-object"><span>{</span>'; 
            for (var key in data) {
                if (rowMax == i++) break;
                html += $.htmlEncode(key) + '<span>:</span>'+ _this.buildStringPreview(data[key]); 
            }
            html += '<span>}</span></span>';
        },
        buildCustomPreview : function(data, rowMax) {
            var _this = this, columnMax = 3, columnLimit = ((data[0].length > columnMax) ? columnMax : data[0].length), html = '<span class="glimpse-preview-object"><span>[</span>', rowLimit = ((rowMax < data.length) ? rowMax : data.length);
            for (var i = 1; i < rowLimit; i++) {
                if (rowMax == i) break;
                var spacer = ''; 
                for (var x = 0; x < columnLimit; x++)
                    html += '<span>:</span>'+ _this.buildStringPreview(data[i][x]);  
                spacer = '<span>,</span>';
            }
            html += '<span>]</span></span>';
        },
        buildStringPreview : function(characterMax, data) {
            if ($.isArray(data))
                return "[ ... ]";  
            if ($.isPlainObject(data))
                return "{ ... }";  
            return data ? '<span class="glimpse-preview-string" title="' + $.htmlEncode(data)  + '">' + $.htmlEncode(data.substr(0, characterMax)) + '<span>...</span></span>' : '';
        }
    });

    var _persistHeight = function(g, options) {
        options.height = $('.glimpse-holder').height();
    }
    
    $.extend($.glimpse, {
        wireEvents : function(g, options) { 
            //Open/Close Holder
            $('.glimpse-open').live('click', function () {
                $(this).hide();
                $('.glimpse-holder').show().animate({ 'height': options.height }, 'fast');
            }); 
            $('.glimpse-close').live('click', function () {
                $('.glimpse-holder').animate({ 'height': '0' }, 'fast', function () { 
                        $(this).hide(); 
                        $('.glimpse-open').show(); 
                    });
            });    

            //Tab Switching 
            $('.glimpse-tabs li:not(.active)').live('mouseover mouseout', function () {
                var item = $(this);
                if (event.type == 'mouseover') { item.addClass('hover'); } else { item.removeClass('hover'); }
            }); 
            $('.glimpse-tabs li').live('click', function () {
                var item = $(this);
                //Setup Tabs
                item.addClass('active');
                $('.glimpse-tabs .active').removeClass('active').removeClass('hover');
                
                //Setup Panels 
                $('.glimpse-panel-holder .active').removeClass('active');
                $('.glimpse-panel-holder .glimpse-panel:eq(' + $('.glimpse-tabs ul li').index(item) + ')').addClass('active');
            });

            //Resize
            $('.glimpse-resizer').resizer(options.height); 
        },
        wireCallback : function(g, options) {
            //Remember height 
            $.glimpseResize.options.endDragCallback = function() {
                _persistHeight(g, options);
            }
        },
        init : function(data) {
            if (!data) return;
            
            var g = $.glimpse, options = g.defaults;
            options.data = data;

            $('body').append(options.html.plugin); 

            g.wireEvents(g, options);
            g.wireCallback(g, options);

            $.glimpseProcessor.layout(g, options)

            $('body').append('<style>' + options.css + '</style>');
        },
        defaults : { 
            data : null,
            html : { plugin : '<div class="glimpse-open"><div class="glimpse-icon"></div></div><div class="glimpse-holder"><div class="glimpse-resizer"></div><div class="glimpse-bar"><div class="glimpse-buttons"><a href="#" class="glimpse-close"></a></div></div><div class="glimpse-content"><div class="glimpse-tabs"><ul></ul></div><div class="glimpse-panel-holder"></div></div></div>',
                     panel : { header: '<table><thead><tr><th>Key</th><th>Value</th></tr></thead>', row: '<tr><th>{0}</th><td>{1}</td></tr>', footer: '</table>' } },
            css : '',
            height : 200
        }
    });
      
	$(document).ready(function() {
		$.glimpse.init(glimpse);
	});

})(jQuery); }  
</script>




</body>
</html>
