<h2>Views Tab</h2>

<div class="plugin-summary">
    <p>The Views tab shows all calls made to configured View Engine(s) and View(s).</p>
</div>

<div class="plugin-layout">
    <h3>Layout</h3> 
    <img src="@Links.Content.Plugin.View_jpg" alt="View tab example" /> 
    <ol class="plain">
        <li><span>Ordinal</span>: As views are evaluated in sequence, this lets you see the order that MVC is finding views</li>
        <li><span>Requested View</span>: Name of view that is trying to be resolved</li>
        <li><span>Master Override</span>: </li>
        <li><span>Partial</span>: Whether it's a partial view that is trying to be resolved</li>
        <li><span>View Engine</span>: Which view engine is being asked to resolve the view</li>
        <li><span>Check Cache</span>: Whether it's trying to resolve the view from the cache</li>
        <li><span>Found</span>: Whether a view match was found</li>
        <li>
            <span>Details</span>: The details of the match that tried to occur. In the case where a match failed it will show 
            where it checked for matches. In a successful match, it will show the data passed to that view. 
        </li> 
    </ol> 
</div>
 
<div class="plugin-know">
    <h3>Did you know</h3> 
    <ul class="plain">
        <li>
            <span>Unused View Engines</span>: Most people don't know that by default, with the advent of MVC3, there are 
            actually two view engines registered by default (WebFormViewEngine and RazorViewEngine). In most cases, 
            site only actively uses one of these engines. 
            <br /><br />
            In the example shown, we can see that the RazorViewEngine is extensively being used, whereas WebFormViewEngine isn't be used. 
            Knowing that in our site we only use RazorViewEngine, we can remove the WebFormViewEngine. 
            <br /><br />
            Once done we are actively reducing the number of lookups that are being performed. Here is how you would remove unused view engines:<br /><br />

<pre class="csharpcode">
<span class="kwrd">public</span> <span class="kwrd">class</span> Global : HttpApplication
{
    <span class="kwrd">public</span> <span class="kwrd">void</span> Application_Start()
    {
        <span class="rem">// Clears all previously registered view engines.</span>
        ViewEngines.Engines.Clear();

        <span class="rem">// Registers the Razor view engine.</span>
        ViewEngines.Engines.Add(<span class="kwrd">new</span> RazorViewEngine());
    }
}</pre>

<p>or in VB:</p>


<pre class="csharpcode">
<span class="kwrd">Public</span> <span class="kwrd">Class</span> MvcApplication
    <span class="kwrd">Inherits</span> System.Web.HttpApplication

    <span class="kwrd">Sub</span> Application_Start()
        ViewEngines.Engines.Clear()
        ViewEngines.Engines.Add(<span class="kwrd">New</span> RazorViewEngine)
    <span class="kwrd">End</span> <span class="kwrd">Sub</span>
<span class="kwrd">End</span> <span class="kwrd">Class</span>
</pre>


        </li>
        <li>
            <span>Different types of data passed to the view</span>: As of ASP.NET MVC3 there are three different ways the controller can pass data to the view: ViewData, 
            TempData and Model. Glimpse shows you the data that is passed to all three of these so that you can compare 
            the data being passed in vs. the data being rendered. 
            <br /><br />
            If you are using DisplayFor/EditorFor, this information can also be used in conjunction this the Metadata tab 
            to determine why data on a page may not be rendering as expected.
    </ul>
</div>
 
<div class="plugin-faq">
    <h3>Frequently Asked Questions</h3> 
    <ol class="plain">
        <li>
            <div>What are the rows highlighted in yellow and why am I seeing more than one?</div>
            These rows show you successful matches that a View Engine has made. Depending on your scenario you may have many 
            matches as the View Engines may be searched not only to resolve the core view, but also any Partial Views that 
            the page (or Layout / Master Page reference) and/or any DisplayFor/EdititorFor. 
        </li>
        <li>
            <div>Why are you showing me non matches (i.e. rows that aren't yellow)?</div>
            As this tab is trying to show you how MVC is searching View Egines within your site, its important to show 
            the non matches that are made. This helps you make decisions as to whether any optimizations can be made in 
            this area (i.e. removing unused View Engines) or where something is not behaving as exspected.
        </li>

        <li>
            <div>I don't want all of my View Model's properties to be serialized, how to I suppress properties being serialized?</div>
            You may want to do this for any number of reasons. For instance, if you are sending your data models to the view and your 
            data models lazy load from a database (as your can do with Entity Framework or other ORMs), Glimpse will trigger these 
            properties to load.

            To avoid this from happening, you can either annotate properties that you don't want serialized with a [ScriptIgnore] attribute, or you can implement an IGlimpseConverter.

            IGlimpseConverters allow for explicit control over how an object is serialized.  In the following example a System.Web.Configuration.CustomErrorsSection object has man of its properties removed before serialization:
<pre class="csharpcode">
<span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Linq;
<span class="kwrd">using</span> System.Web.Configuration;
<span class="kwrd">using</span> Glimpse.Core.Extensibility;

<span class="kwrd">namespace</span> Glimpse.Core.Converter
{
    [GlimpseConverter]
    <span class="kwrd">internal class</span> CustomErrorsSectionConverter:IGlimpseConverter
    {
        <span class="kwrd">public</span> IDictionary<<span class="kwrd">string</span>, <span class="kwrd">object</span>> Serialize(<span class="kwrd">object</span> obj)
        {
            <span class="kwrd">var</span> source = obj <span class="kwrd">as</span> CustomErrorsSection;
            <span class="kwrd">if</span> (source == <span class="kwrd">null</span>) <span class="kwrd">return null</span>;

            <span class="kwrd">var</span> errors = source.Errors.Cast<CustomError>().ToDictionary(error => error.StatusCode.ToString(), error => error.Redirect);

            <span class="kwrd">var</span> result = <span class="kwrd">new</span> Dictionary<<span class="kwrd">string</span>, <span class="kwrd">object</span>>
                             {
                                 {"Mode", source.Mode.ToString()},
                                 {"RedirectMode", source.RedirectMode.ToString()},
                                 {"DefaultRedirect", source.DefaultRedirect},
                                 {"Errors", errors.Count > 0 ? errors : <span class="kwrd">null</span> },
                             };

            <span class="kwrd">return</span> result;
        }

        <span class="kwrd">public</span> IEnumerable<Type> SupportedTypes
        {
            <span class="kwrd">get</span>
            {
                <span class="kwrd">yield return typeof</span>(CustomErrorsSection);
                <span class="kwrd">yield break</span>;
            }
        }
    }
}

</pre>
        </li> 
    </ol>
</div>