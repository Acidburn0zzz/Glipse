@Html.GlimpseDownload(false)
   
<div class="features help">

    <table width="100%">
        <tr>
            <td width="50%">  
                <h2>Creating Plugins</h2>
            </td>
            <td rowspan="2" style="text-align:center; vertical-align:bottom"> 
                @*<img src="@Links.Content.Support.GlimpsePlatform_jpg" />*@
                &nbsp;
            </td>
        </tr>
        <tr>
            <td>
                <p>The Glimpse team is providing general plugins for ASP.NET and ASP.NET MVC, 
                however it may be beneficial to use additional plugins. 
                Third parties that build frameworks or applications on top of ASP.NET may 
                provide their own plugins to allow an insight in what is happening on the server. 
                <br />This page explains how to write your own Glimpse server plugins.</p>
            </td> 
        </tr>
    </table>
 
    @Menu.HelpMenu(Html, false, 6) 
     
     <div class="plugin-layout">

     <div style="color:Red;font-weight:bold;padding:1em;">
     Glimpse is still in beta. The code examples on this page work with version 0.83, the API may change before 
     the RTW release.</div>

    <h3>Ideas</h3>
    <p>If you are using your own application framework, you may want to write a Glimpse plugin for that. Examples would be:</p>

    <ul class="plain">

    <li><b>Current User Plugin:</b> Information about the currently logged on user with information about the permissions or roles the user has or site customization settings of the user.</li>
<li><b>Caching Plugin:</b> If you run your own caching framework, you may want some metrics on how well the cache works.</li>
<li><b>Complex data structures:</b> A site uses a complex data structure that drives certain aspects of the site that changes during runtime. A plugin could visualize the structure and the content of the data during the time of the request.</li>
<li><b>Settings:</b> In addition to app settings you site may use additional settings stored in the database or another configuration store. A plugin could display these settings.</li>
<li><b>Data Access Layer:</b> There may be Glimpse plugins for Entity Framework or nHibernate in the future, but if you have your own data access layer, you could write a plugin to show all hits to the database. This is especially helpful in cases where you can't use SQL Profiler.</li>

   </ul>

   </div>

   <div>
   <h3>Getting started</h3>
  <p> We recommend to create a new assembly for your plugins and then reference the Glimpse.Core assembly and your business logic assemblies. This way there is no direct dependency of your business logic assemblies on Glimpse.</p>
  <p>You need to put your plugin into an assembly, an class in the  App_Code folder in a web site project does not work.</p>

   </div>

   <div>
   <h3>Hello World Plugin</h3>
   
   <img src="@Links.Content.Help.HelloWorldPlugin_jpg" alt="Hello World tab example" />

   <p>
   Create a new class library assembly (.NET Framework 4), reference the Glimpse.Core.dll. You also need to reference "System.ComponentModel.Composition" and "System.Web", then paste the following code into the class1.cs:
   </p>

   <pre class="csharpcode">
<span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> Glimpse.Core.Extensibility;
 
<span class="kwrd">namespace</span> Sample.Docs
{
    [Glimpse.Core.Extensibility.GlimpsePluginAttribute()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> GlimpsePluginSample : IGlimpsePlugin
    {
        <span class="kwrd">public</span> <span class="kwrd">object</span> GetData(HttpContextBase context)
        {
            var data = <span class="kwrd">new</span> List&lt;<span class="kwrd">object</span>[]&gt; { <span class="kwrd">new</span>[] { <span class="str">"Key"</span>, <span class="str">"Value"</span> } };

            data.Add(<span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="str">"Hello"</span>, <span class="str">"World"</span> });
            data.Add(<span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="str">"Hola"</span>, <span class="str">"Mundo"</span> });
            data.Add(<span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="str">"Hallo"</span>, <span class="str">"Welt"</span> });

            <span class="kwrd">return</span> data;
        }
 
        <span class="kwrd">public</span> <span class="kwrd">void</span> SetupInit()
        {
        }
 
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name
        {
            get { <span class="kwrd">return</span> <span class="str">"Sample"</span>; }
        }
    }
}
</pre>

<p>or in Visual Basic:</p>

<pre class="csharpcode">
<span class="kwrd">Imports</span> System.Web
<span class="kwrd">Imports</span> Glimpse.Core.Extensibility
 
&lt;GlimpsePluginAttribute()&gt; _
<span class="kwrd">Public</span> <span class="kwrd">Class</span> GlimpsePluginSample
    <span class="kwrd">Implements</span> IGlimpsePlugin
 
    <span class="kwrd">Public</span> <span class="kwrd">Function</span> GetData(context <span class="kwrd">As</span> HttpContextBase) <span class="kwrd">As</span> <span class="kwrd">Object</span> <span class="kwrd">Implements</span> IGlimpsePlugin.GetData
 
        <span class="kwrd">Dim</span> data <span class="kwrd">As</span> <span class="kwrd">New</span> List(Of <span class="kwrd">Object</span>())
        data.Add(<span class="kwrd">New</span> <span class="kwrd">Object</span>() {<span class="str">"Key"</span>, <span class="str">"Value"</span>})
 
        data.Add(<span class="kwrd">New</span> <span class="kwrd">Object</span>() {<span class="str">"Hello"</span>, <span class="str">"World"</span>})
        data.Add(<span class="kwrd">New</span> <span class="kwrd">Object</span>() {<span class="str">"Hola"</span>, <span class="str">"Mundo"</span>})
        data.Add(<span class="kwrd">New</span> <span class="kwrd">Object</span>() {<span class="str">"Hallo"</span>, <span class="str">"Welt"</span>})
 
        <span class="kwrd">Return</span> data
 
    <span class="kwrd">End</span> <span class="kwrd">Function</span>
 
    <span class="kwrd">Public</span> <span class="kwrd">ReadOnly</span> <span class="kwrd">Property</span> Name <span class="kwrd">As</span> <span class="kwrd">String</span> <span class="kwrd">Implements</span> IGlimpsePlugin.Name
        <span class="kwrd">Get</span>
            <span class="kwrd">Return</span> <span class="str">"Hello World VB"</span>
        <span class="kwrd">End</span> <span class="kwrd">Get</span>
    <span class="kwrd">End</span> <span class="kwrd">Property</span>
 
    <span class="kwrd">Public</span> <span class="kwrd">Sub</span> SetupInit() <span class="kwrd">Implements</span> IGlimpsePlugin.SetupInit
 
    <span class="kwrd">End</span> <span class="kwrd">Sub</span>
<span class="kwrd">End</span> <span class="kwrd">Class</span>
</pre>

<p>All we need to do is implement the IGlimpsePlugin interface. The name property will be used as the caption of the tab, so make sure you don't create a name that is already there. </p>
<p>The meat of the class is in GetData, this is called by the Glimpse framework and the data it returns is serialized as JSON according to the Glimpse protocol and is then sent to the browser.</p>
<p>To be super flexible we return a generic List of object arrays. The very first object array holds the headers. In our case: 'Key' and 'Value'. We then just add a few more object arrays with data which translate into rows under our Sample tab.</p>
<p>Now compile the assembly and place it into the bin directory of your web site or your MVC application. Glimpse is using the Managed Extensibility Framework (MEF) in .NET 4 to automatically load and use your plugin. No further configuration is required.</p>

   </div>

<div>
<h3>Another Plugin example</h3>

<p>In many cases you need to display nested data on your tab where the value is not just a string but another set of data.</p>
<p>Say we have a remote server where some administrator keeps deleting our files. A simple plugin would show us all files in the same directory as the currently executing file:</p>

<img src="@Links.Content.Help.FilesPlugin_jpg" alt="Files tab example" />

<p>There are a few new things here; we have a nested set of data, some basic formatting and a help icon.</p>
<p>To nest result sets, we create a separate List of objects arrays: </p>

<pre class="csharpcode">
var files = <span class="kwrd">new</span> List&lt;<span class="kwrd">object</span>[]&gt; { <span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="str">"Name"</span>, <span class="str">"Size"</span>, <span class="str">"Last Mod"</span>, <span class="str">"Created"</span>, <span class="str">"Readonly"</span> } };</pre>

<p>then populate it in a loop:</p>

<pre class="csharpcode">
   files.Add(<span class="kwrd">new</span> <span class="kwrd">object</span>[] { fileSpec, 
    <span class="str">"_"</span> +file.Length.ToString() + <span class="str">"_"</span>,
   file.LastAccessTimeUtc.ToShortDateString(),
   file.CreationTimeUtc.ToShortDateString(),
   file.IsReadOnly });
</pre>

<p>and then add the List into our original List:</p>

<pre class="csharpcode">
data.Add(<span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="str">"Files"</span>, files });</pre>

<p>You can also see that I used the known _foo_ syntax to underline a value, you can also use *bar* for bold text.</p>
<p>To get the help icon, we need to create a web page with some help information for our plugin somewhere and 
then add its Url to our plugin. We need to implement the IProvideGlimpseHelp interface with a single property: HelpUrl.
</p>

<p>Here's the complete code for this plugin:</p>

<pre class="csharpcode">
<span class="kwrd">using</span> System;
<span class="kwrd">using</span> System.Collections.Generic;
<span class="kwrd">using</span> System.Web;
<span class="kwrd">using</span> System.IO;
 
<span class="kwrd">using</span> Glimpse.Core.Extensibility;
 
<span class="kwrd">namespace</span> Sample.Docs
{
    [Glimpse.Core.Extensibility.GlimpsePluginAttribute()]
    <span class="kwrd">public</span> <span class="kwrd">class</span> GlimpseFilesPlugin : IGlimpsePlugin, IProvideGlimpseHelp
    {
        <span class="kwrd">public</span> <span class="kwrd">object</span> GetData(HttpContextBase context)
        {
            var data = <span class="kwrd">new</span> List&lt;<span class="kwrd">object</span>[]&gt; { <span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="str">"Key"</span>, <span class="str">"Value"</span> } };
 
            <span class="kwrd">string</span> folderName = Path.GetDirectoryName(HttpContext.Current.Request.PhysicalPath);
            <span class="kwrd">string</span> execFileName = Path.GetFileName(HttpContext.Current.Request.PhysicalPath);
 
            data.Add(<span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="str">"Directory"</span>, folderName });
 
            DirectoryInfo folder = <span class="kwrd">new</span> DirectoryInfo(folderName);
 
            var files = <span class="kwrd">new</span> List&lt;<span class="kwrd">object</span>[]&gt; { <span class="kwrd">new</span> <span class="kwrd">object</span>[] 
              { <span class="str">"Name"</span>, <span class="str">"Size"</span>, <span class="str">"Last Mod"</span>, <span class="str">"Created"</span>, <span class="str">"Readonly"</span> } };
 
            <span class="kwrd">foreach</span> (FileSystemInfo fsi <span class="kwrd">in</span> folder.GetFileSystemInfos())
            {
                <span class="kwrd">if</span> (fsi.GetType() == <span class="kwrd">typeof</span>(FileInfo))
                {
                    FileInfo file = (FileInfo)fsi;
 
                    <span class="kwrd">string</span> fileSpec = file.Name;
                    <span class="kwrd">if</span> (fileSpec == execFileName)
                    {
                        fileSpec = <span class="str">"*"</span> + fileSpec + <span class="str">"*"</span>;
                    }
 
                    files.Add(<span class="kwrd">new</span> <span class="kwrd">object</span>[] { fileSpec, 
                     <span class="str">"_"</span> +file.Length.ToString() + <span class="str">"_"</span>,
                    file.LastAccessTimeUtc.ToShortDateString(),
                    file.CreationTimeUtc.ToShortDateString(),
                    file.IsReadOnly });
                }
            }
 
            data.Add(<span class="kwrd">new</span> <span class="kwrd">object</span>[] { <span class="str">"Files"</span>, files });
 
            <span class="kwrd">return</span> data;
        }
 
        <span class="kwrd">public</span> <span class="kwrd">void</span> SetupInit()
        {
        }
 
        <span class="kwrd">public</span> <span class="kwrd">string</span> Name
        {
            get { <span class="kwrd">return</span> <span class="str">"Files"</span>; }
        }
 
        <span class="kwrd">public</span> <span class="kwrd">string</span> HelpUrl
        {
            get { <span class="kwrd">return</span> <span class="str">"http://myCoolGlimpsePlugins.xyz/help/files"</span>; }
        }
    }
}
</pre>

</div>

<div>
<h3>GlimpsePluginAttribute</h3>

<p>Any plugin class you write needs to be decorated with the Glimpse.Core.Extensibility.GlimpsePluginAttribute. </p>
<p>This attribute has two optional parameters:</p>

    <ul class="plain">
<li><b>ShouldSetupInInit</b> False by default, if this is true the code in the SetupInit method is executed at application start up. So if your plugin needs any initialization, put that code into SetupInit and then set this parameter to true. Remember a web application starts every time an application pool process is started or restarted but also when you make changes to your web.config.</li>
<li><b>SessionRequired</b> False by default, unless you set this to true, you can't access the ASP.NET session object. So if you need to access any data in session, set this to true.</li>
</ul>


</div>

</div>